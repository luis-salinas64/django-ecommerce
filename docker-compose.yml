version: "3.3"
# Este es un archivo de docker-compose.yml para configurar el uso de contenedores de software.

services:

  db:
    # Este servicio crea una base de datos de tipo Postgres.
    image: postgres:13.2
    container_name: shop_database
    restart: always
    volumes:
      # Aquí se enlaza el contenido de dentro del contenedor con el directorio en nuestra PC
      # de esa manera lo que guardemos en la base de datos va a quedar accesible en nuestra carpeta.
      - ./database:/var/lib/postgresql/data

    environment:
      # Postgres nos exige que establezcamos un usuario por defecto, esto se hace por medio
      # de variables de entorno. Según el hub de Postgres:
      POSTGRES_DB: shop_db
      POSTGRES_USER: luiggi_user
      POSTGRES_PASSWORD: 123Luiggi!

    ports:
      # Enlazamos el puerto en el que trabaja Postgres, por defecto el 5432
      - 5432:5432
  
  # adminer:
  #   # Una interfaz para monitoreo y gestión de nuestra base de datos.
  #   # Se puede acceder a ella en localhost:8080
  #   container_name: shop_adminer
  #   image: adminer:4.8.0
  #   restart: always
  #   ports:

  #     - 8080:8080
  #   # depends_on indica que este servicio depende de que primero inicie "db"
  #   depends_on: ["db"]

  shop:
    # build es el lugar desde donde toma los archivos para generar la imagen.
    build: .
    # Imágen a utilizar:
    image: shop
    # Nombre del container:
    container_name: shop
    # Comportamiento ante fallos y al iniciar el sistema:
    restart: always
    # Carpetas enlazadas:
    volumes:
      # Source code directory:
      - type: bind
        source: .
        target: /opt/back_end
    # Puertos enlazados:
    ports:
        - "8000:8000"
    # Control de consola:
    stdin_open: true
    tty: true
    command: python shop/manage.py runserver 0.0.0.0:8000
    #command: gunicorn --chdir /opt/back_end/shop shop.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      - db
# +++++++++++++++++++ Configuración para tareas asincrónicas +++++++++++++++++++ #

  # Base de datos tipo Key-Value redis:     
  # redis:
  #   image: "redis:alpine"
  #   container_name: redis
  #   depends_on:
  #     - db

  # Celery-worker para ejecutar las tareas (funciones) que definimos en nuestro código:
  # celery:
  #   build: .
  #   command: bash -c "cd shop && celery --app shop worker -l info"
  #   container_name: celery
  #   volumes:
  #     - type: bind
  #       source: .
  #       target: /opt/back_end
  #   depends_on:
  #     - redis

  # # Celery-beat para organizar la
  # celery-beat:
  #   build: .
  #   container_name: celery_beat
  #   command: bash -c "cd shop && celery --app shop beat -l info"
  #   volumes:
  #     - type: bind
  #       source: .
  #       target: /opt/back_end
  #   depends_on:
  #     - redis
    
